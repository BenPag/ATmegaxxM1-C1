
optiboot_atmega16m1_8.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00003fdc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000001dc  00003e00  00003e00  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .version      00000002  00003ffc  00003ffc  00000270  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000011  00000000  00000000  00000272  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  00000283  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000593  00000000  00000000  000002ab  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000024b  00000000  00000000  0000083e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000032f  00000000  00000000  00000a89  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000094  00000000  00000000  00000db8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000001d8  00000000  00000000  00000e4c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000003ee  00000000  00000000  00001024  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000078  00000000  00000000  00001412  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00003e00 <main>:
#define appstart_vec (0)
#endif // VIRTUAL_BOOT_PARTITION


/* main program starts here */
int main(void) {
    3e00:	1f 92       	push	r1
    3e02:	cd b7       	in	r28, 0x3d	; 61
    3e04:	de b7       	in	r29, 0x3e	; 62
  //  SP points to RAMEND
  //  r1 contains zero
  //
  // If not, uncomment the following instructions:
  // cli();
  asm volatile ("clr __zero_reg__");
    3e06:	11 24       	eor	r1, r1
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
#if !defined(__AVR_ATmega16__)
  ch = MCUSR;
    3e08:	84 b7       	in	r24, 0x34	; 52
  MCUSR = 0;
    3e0a:	14 be       	out	0x34, r1	; 52
#else
  ch = MCUCSR;
  MCUCSR = 0;
#endif
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    3e0c:	98 2f       	mov	r25, r24
    3e0e:	9d 70       	andi	r25, 0x0D	; 13
    3e10:	09 f0       	breq	.+2      	; 0x3e14 <main+0x14>
      appStart(ch);
    3e12:	de d0       	rcall	.+444    	; 0x3fd0 <appStart>

#if LED_START_FLASHES > 0
  // Set up Timer 1 for timeout counter
  TCCR1B = _BV(CS12) | _BV(CS10); // div 1024
    3e14:	85 e0       	ldi	r24, 0x05	; 5
    3e16:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <optiboot_version+0x7fc085>
  UCSRB = _BV(RXEN) | _BV(TXEN);  // enable Rx & Tx
  UCSRC = _BV(URSEL) | _BV(UCSZ1) | _BV(UCSZ0);  // config USART; 8N1
  UBRRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#elif defined(__AVR_ATmega16M1__) || defined(__AVR_ATmega32M1__) || defined(__AVR_ATmega64M1__)
  // USART 8N1, enable RX and TX
  LINCR = (0 << LCONF1) | (0 << LCONF0) | (0 << LENA) | (1 << LCMD2) | (1 << LCMD1) | (1 << LCMD0);
    3e1a:	87 e0       	ldi	r24, 0x07	; 7
    3e1c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <optiboot_version+0x7fc0cc>
  LINENIR = 0; // disable interrupts
    3e20:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <optiboot_version+0x7fc0ce>
  LINBTR = (1 << LDISR) | 8; // 8 samples per bit
    3e24:	88 e8       	ldi	r24, 0x88	; 136
    3e26:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <optiboot_version+0x7fc0d0>
  LINBRR = (uint16_t)( F_CPU/(8*BAUD_RATE)-1);
    3e2a:	80 e1       	ldi	r24, 0x10	; 16
    3e2c:	90 e0       	ldi	r25, 0x00	; 0
    3e2e:	90 93 ce 00 	sts	0x00CE, r25	; 0x8000ce <optiboot_version+0x7fc0d2>
    3e32:	80 93 cd 00 	sts	0x00CD, r24	; 0x8000cd <optiboot_version+0x7fc0d1>
  LINCR |= (1 << LENA);
    3e36:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <optiboot_version+0x7fc0cc>
    3e3a:	88 60       	ori	r24, 0x08	; 8
    3e3c:	80 93 c8 00 	sts	0x00C8, r24	; 0x8000c8 <optiboot_version+0x7fc0cc>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 1s
  watchdogConfig(WATCHDOG_1S);
    3e40:	8e e0       	ldi	r24, 0x0E	; 14
    3e42:	b1 d0       	rcall	.+354    	; 0x3fa6 <watchdogConfig>

#if (LED_START_FLASHES > 0) || defined(LED_DATA_FLASH)
  /* Set LED pin as output */
  LED_DDR |= _BV(LED);
    3e44:	50 9a       	sbi	0x0a, 0	; 10
    3e46:	86 e0       	ldi	r24, 0x06	; 6
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e48:	28 e1       	ldi	r18, 0x18	; 24
    3e4a:	3e ef       	ldi	r19, 0xFE	; 254
    TIFR1 = _BV(TOV1);
    3e4c:	91 e0       	ldi	r25, 0x01	; 1
}

#if LED_START_FLASHES > 0
void flash_led(uint8_t count) {
  do {
    TCNT1 = -(F_CPU/(1024*16));
    3e4e:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <optiboot_version+0x7fc089>
    3e52:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <optiboot_version+0x7fc088>
    TIFR1 = _BV(TOV1);
    3e56:	96 bb       	out	0x16, r25	; 22
    while(!(TIFR1 & _BV(TOV1)));
    3e58:	b0 9b       	sbis	0x16, 0	; 22
    3e5a:	fe cf       	rjmp	.-4      	; 0x3e58 <main+0x58>
#if defined(__AVR_ATmega8__) || defined (__AVR_ATmega32__) || defined (__AVR_ATmega16__)
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
    3e5c:	48 9a       	sbi	0x09, 0	; 9
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3e5e:	a8 95       	wdr
    3e60:	81 50       	subi	r24, 0x01	; 1
    LED_PORT ^= _BV(LED);
#else
    LED_PIN |= _BV(LED);
#endif
    watchdogReset();
  } while (--count);
    3e62:	a9 f7       	brne	.-22     	; 0x3e4e <main+0x4e>
    3e64:	81 2c       	mov	r8, r1
    3e66:	91 2c       	mov	r9, r1
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    3e68:	13 e0       	ldi	r17, 0x03	; 3
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3e6a:	01 e0       	ldi	r16, 0x01	; 1
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    3e6c:	25 e0       	ldi	r18, 0x05	; 5
    3e6e:	f2 2e       	mov	r15, r18
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    3e70:	31 e1       	ldi	r19, 0x11	; 17
    3e72:	e3 2e       	mov	r14, r19
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    3e74:	8c d0       	rcall	.+280    	; 0x3f8e <getch>

    if(ch == STK_GET_PARAMETER) {
    3e76:	81 34       	cpi	r24, 0x41	; 65
    3e78:	79 f4       	brne	.+30     	; 0x3e98 <main+0x98>
      unsigned char which = getch();
    3e7a:	89 d0       	rcall	.+274    	; 0x3f8e <getch>
      verifySpace();
    3e7c:	89 83       	std	Y+1, r24	; 0x01
    3e7e:	99 d0       	rcall	.+306    	; 0x3fb2 <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    3e80:	89 81       	ldd	r24, Y+1	; 0x01
    3e82:	82 38       	cpi	r24, 0x82	; 130
    3e84:	11 f4       	brne	.+4      	; 0x3e8a <main+0x8a>
	  putch(optiboot_version & 0xFF);
    3e86:	82 e0       	ldi	r24, 0x02	; 2
    3e88:	05 c0       	rjmp	.+10     	; 0x3e94 <main+0x94>
      } else if (which == 0x81) {
    3e8a:	81 38       	cpi	r24, 0x81	; 129
    3e8c:	11 f4       	brne	.+4      	; 0x3e92 <main+0x92>
	  putch(optiboot_version >> 8);
    3e8e:	86 e0       	ldi	r24, 0x06	; 6
    3e90:	01 c0       	rjmp	.+2      	; 0x3e94 <main+0x94>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    3e92:	83 e0       	ldi	r24, 0x03	; 3
    3e94:	75 d0       	rcall	.+234    	; 0x3f80 <putch>
    3e96:	71 c0       	rjmp	.+226    	; 0x3f7a <main+0x17a>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    3e98:	82 34       	cpi	r24, 0x42	; 66
    3e9a:	11 f4       	brne	.+4      	; 0x3ea0 <main+0xa0>
      // SET DEVICE is ignored
      getNch(20);
    3e9c:	84 e1       	ldi	r24, 0x14	; 20
    3e9e:	03 c0       	rjmp	.+6      	; 0x3ea6 <main+0xa6>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    3ea0:	85 34       	cpi	r24, 0x45	; 69
    3ea2:	19 f4       	brne	.+6      	; 0x3eaa <main+0xaa>
      // SET DEVICE EXT is ignored
      getNch(5);
    3ea4:	85 e0       	ldi	r24, 0x05	; 5
    3ea6:	8d d0       	rcall	.+282    	; 0x3fc2 <getNch>
    3ea8:	68 c0       	rjmp	.+208    	; 0x3f7a <main+0x17a>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    3eaa:	85 35       	cpi	r24, 0x55	; 85
    3eac:	49 f4       	brne	.+18     	; 0x3ec0 <main+0xc0>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    3eae:	6f d0       	rcall	.+222    	; 0x3f8e <getch>
    3eb0:	d8 2e       	mov	r13, r24
      newAddress = (newAddress & 0xff) | (getch() << 8);
    3eb2:	6d d0       	rcall	.+218    	; 0x3f8e <getch>
    3eb4:	8d 2c       	mov	r8, r13
    3eb6:	91 2c       	mov	r9, r1
    3eb8:	98 2a       	or	r9, r24
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    3eba:	88 0c       	add	r8, r8
    3ebc:	99 1c       	adc	r9, r9
    3ebe:	5c c0       	rjmp	.+184    	; 0x3f78 <main+0x178>
      address = newAddress;
      verifySpace();
    }
    else if(ch == STK_UNIVERSAL) {
    3ec0:	86 35       	cpi	r24, 0x56	; 86
    3ec2:	21 f4       	brne	.+8      	; 0x3ecc <main+0xcc>
      // UNIVERSAL command is ignored
      getNch(4);
    3ec4:	84 e0       	ldi	r24, 0x04	; 4
    3ec6:	7d d0       	rcall	.+250    	; 0x3fc2 <getNch>
      putch(0x00);
    3ec8:	80 e0       	ldi	r24, 0x00	; 0
    3eca:	e4 cf       	rjmp	.-56     	; 0x3e94 <main+0x94>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    3ecc:	84 36       	cpi	r24, 0x64	; 100
    3ece:	09 f0       	breq	.+2      	; 0x3ed2 <main+0xd2>
    3ed0:	36 c0       	rjmp	.+108    	; 0x3f3e <main+0x13e>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    3ed2:	5d d0       	rcall	.+186    	; 0x3f8e <getch>
    3ed4:	5c d0       	rcall	.+184    	; 0x3f8e <getch>
    3ed6:	d8 2e       	mov	r13, r24
      savelength = length;
      desttype = getch();
    3ed8:	5a d0       	rcall	.+180    	; 0x3f8e <getch>
    3eda:	c8 2e       	mov	r12, r24
    3edc:	a1 2c       	mov	r10, r1
    3ede:	bb 24       	eor	r11, r11
    3ee0:	b3 94       	inc	r11

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    3ee2:	55 d0       	rcall	.+170    	; 0x3f8e <getch>
    3ee4:	f5 01       	movw	r30, r10
    3ee6:	81 93       	st	Z+, r24
    3ee8:	5f 01       	movw	r10, r30
      while (--length);
    3eea:	de 12       	cpse	r13, r30
    3eec:	fa cf       	rjmp	.-12     	; 0x3ee2 <main+0xe2>

      // Read command terminator, start reply
      verifySpace();
    3eee:	61 d0       	rcall	.+194    	; 0x3fb2 <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    3ef0:	f5 e4       	ldi	r31, 0x45	; 69
    3ef2:	cf 12       	cpse	r12, r31
    3ef4:	01 c0       	rjmp	.+2      	; 0x3ef8 <main+0xf8>
    3ef6:	ff cf       	rjmp	.-2      	; 0x3ef6 <main+0xf6>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    3ef8:	f4 01       	movw	r30, r8
    3efa:	17 bf       	out	0x37, r17	; 55
    3efc:	e8 95       	spm
	    boot_spm_busy_wait();
    3efe:	07 b6       	in	r0, 0x37	; 55
    3f00:	00 fc       	sbrc	r0, 0
    3f02:	fd cf       	rjmp	.-6      	; 0x3efe <main+0xfe>
    3f04:	a4 01       	movw	r20, r8
    3f06:	a0 e0       	ldi	r26, 0x00	; 0
    3f08:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    3f0a:	2c 91       	ld	r18, X
    3f0c:	12 96       	adiw	r26, 0x02	; 2
    3f0e:	cd 01       	movw	r24, r26
    3f10:	01 97       	sbiw	r24, 0x01	; 1
		a |= (*bufPtr++) << 8;
    3f12:	fc 01       	movw	r30, r24
    3f14:	80 81       	ld	r24, Z
    3f16:	30 e0       	ldi	r19, 0x00	; 0
    3f18:	38 2b       	or	r19, r24
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    3f1a:	fa 01       	movw	r30, r20
    3f1c:	09 01       	movw	r0, r18
    3f1e:	07 bf       	out	0x37, r16	; 55
    3f20:	e8 95       	spm
    3f22:	11 24       	eor	r1, r1
		addrPtr += 2;
    3f24:	4e 5f       	subi	r20, 0xFE	; 254
    3f26:	5f 4f       	sbci	r21, 0xFF	; 255
	    } while (len -= 2);
    3f28:	da 12       	cpse	r13, r26
    3f2a:	ef cf       	rjmp	.-34     	; 0x3f0a <main+0x10a>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    3f2c:	f4 01       	movw	r30, r8
    3f2e:	f7 be       	out	0x37, r15	; 55
    3f30:	e8 95       	spm
	    boot_spm_busy_wait();
    3f32:	07 b6       	in	r0, 0x37	; 55
    3f34:	00 fc       	sbrc	r0, 0
    3f36:	fd cf       	rjmp	.-6      	; 0x3f32 <main+0x132>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    3f38:	e7 be       	out	0x37, r14	; 55
    3f3a:	e8 95       	spm
    3f3c:	1e c0       	rjmp	.+60     	; 0x3f7a <main+0x17a>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    3f3e:	84 37       	cpi	r24, 0x74	; 116
    3f40:	71 f4       	brne	.+28     	; 0x3f5e <main+0x15e>
      uint8_t desttype;
      GETLENGTH(length);
    3f42:	25 d0       	rcall	.+74     	; 0x3f8e <getch>
    3f44:	24 d0       	rcall	.+72     	; 0x3f8e <getch>
    3f46:	d8 2e       	mov	r13, r24

      desttype = getch();
    3f48:	22 d0       	rcall	.+68     	; 0x3f8e <getch>

      verifySpace();
    3f4a:	33 d0       	rcall	.+102    	; 0x3fb2 <verifySpace>
    3f4c:	54 01       	movw	r10, r8
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    3f4e:	f5 01       	movw	r30, r10
    3f50:	85 91       	lpm	r24, Z+
    3f52:	5f 01       	movw	r10, r30
    3f54:	15 d0       	rcall	.+42     	; 0x3f80 <putch>
	} while (--length);
    3f56:	da 94       	dec	r13
    3f58:	d1 10       	cpse	r13, r1
    3f5a:	f9 cf       	rjmp	.-14     	; 0x3f4e <main+0x14e>
    3f5c:	0e c0       	rjmp	.+28     	; 0x3f7a <main+0x17a>

      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    3f5e:	85 37       	cpi	r24, 0x75	; 117
    3f60:	39 f4       	brne	.+14     	; 0x3f70 <main+0x170>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    3f62:	27 d0       	rcall	.+78     	; 0x3fb2 <verifySpace>
      putch(SIGNATURE_0);
    3f64:	8e e1       	ldi	r24, 0x1E	; 30
    3f66:	0c d0       	rcall	.+24     	; 0x3f80 <putch>
      putch(SIGNATURE_1);
    3f68:	84 e9       	ldi	r24, 0x94	; 148
    3f6a:	0a d0       	rcall	.+20     	; 0x3f80 <putch>
      putch(SIGNATURE_2);
    3f6c:	84 e8       	ldi	r24, 0x84	; 132
    3f6e:	92 cf       	rjmp	.-220    	; 0x3e94 <main+0x94>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    3f70:	81 35       	cpi	r24, 0x51	; 81
    3f72:	11 f4       	brne	.+4      	; 0x3f78 <main+0x178>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    3f74:	88 e0       	ldi	r24, 0x08	; 8
    3f76:	17 d0       	rcall	.+46     	; 0x3fa6 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    3f78:	1c d0       	rcall	.+56     	; 0x3fb2 <verifySpace>
    }
    putch(STK_OK);
    3f7a:	80 e1       	ldi	r24, 0x10	; 16
    3f7c:	01 d0       	rcall	.+2      	; 0x3f80 <putch>
  }
    3f7e:	7a cf       	rjmp	.-268    	; 0x3e74 <main+0x74>

00003f80 <putch>:
}

void putch(char ch) {
#ifndef SOFT_UART
#if defined(__AVR_ATmega16M1__) || defined(__AVR_ATmega32M1__) || defined(__AVR_ATmega64M1__)
  while ( LINSIR & _BV(LBUSY));
    3f80:	90 91 c9 00 	lds	r25, 0x00C9	; 0x8000c9 <optiboot_version+0x7fc0cd>
    3f84:	94 fd       	sbrc	r25, 4
    3f86:	fc cf       	rjmp	.-8      	; 0x3f80 <putch>
  LINDAT = ch;
    3f88:	80 93 d2 00 	sts	0x00D2, r24	; 0x8000d2 <optiboot_version+0x7fc0d6>
    3f8c:	08 95       	ret

00003f8e <getch>:
    :
      "r25"
);
#else
#if defined(__AVR_ATmega16M1__) || defined(__AVR_ATmega32M1__) || defined(__AVR_ATmega64M1__)
while(!(LINSIR & _BV(LRXOK)))
    3f8e:	80 91 c9 00 	lds	r24, 0x00C9	; 0x8000c9 <optiboot_version+0x7fc0cd>
    3f92:	80 ff       	sbrs	r24, 0
    3f94:	fc cf       	rjmp	.-8      	; 0x3f8e <getch>
  ;
if (!(LINERR & _BV(LFERR))) {
    3f96:	80 91 cb 00 	lds	r24, 0x00CB	; 0x8000cb <optiboot_version+0x7fc0cf>
    3f9a:	84 fd       	sbrc	r24, 4
    3f9c:	01 c0       	rjmp	.+2      	; 0x3fa0 <getch+0x12>
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    3f9e:	a8 95       	wdr
     * don't care that an invalid char is returned...)
     */
  watchdogReset();
}

ch = LINDAT;
    3fa0:	80 91 d2 00 	lds	r24, 0x00D2	; 0x8000d2 <optiboot_version+0x7fc0d6>
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    3fa4:	08 95       	ret

00003fa6 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    3fa6:	e0 e6       	ldi	r30, 0x60	; 96
    3fa8:	f0 e0       	ldi	r31, 0x00	; 0
    3faa:	98 e1       	ldi	r25, 0x18	; 24
    3fac:	90 83       	st	Z, r25
  WDTCSR = x;
    3fae:	80 83       	st	Z, r24
    3fb0:	08 95       	ret

00003fb2 <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    3fb2:	ed df       	rcall	.-38     	; 0x3f8e <getch>
    3fb4:	80 32       	cpi	r24, 0x20	; 32
    3fb6:	19 f0       	breq	.+6      	; 0x3fbe <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    3fb8:	88 e0       	ldi	r24, 0x08	; 8
    3fba:	f5 df       	rcall	.-22     	; 0x3fa6 <watchdogConfig>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
    3fbc:	ff cf       	rjmp	.-2      	; 0x3fbc <verifySpace+0xa>
  }
  putch(STK_INSYNC);
    3fbe:	84 e1       	ldi	r24, 0x14	; 20
    3fc0:	df cf       	rjmp	.-66     	; 0x3f80 <putch>

00003fc2 <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    3fc2:	cf 93       	push	r28
    3fc4:	c8 2f       	mov	r28, r24
  do getch(); while (--count);
    3fc6:	e3 df       	rcall	.-58     	; 0x3f8e <getch>
    3fc8:	c1 50       	subi	r28, 0x01	; 1
    3fca:	e9 f7       	brne	.-6      	; 0x3fc6 <getNch+0x4>
  verifySpace();
}
    3fcc:	cf 91       	pop	r28
}
#endif

void getNch(uint8_t count) {
  do getch(); while (--count);
  verifySpace();
    3fce:	f1 cf       	rjmp	.-30     	; 0x3fb2 <verifySpace>

00003fd0 <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    3fd0:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    3fd2:	80 e0       	ldi	r24, 0x00	; 0
    3fd4:	e8 df       	rcall	.-48     	; 0x3fa6 <watchdogConfig>
  // Note that appstart_vec is defined so that this works with either
  // real or virtual boot partitions.
  __asm__ __volatile__ (
    3fd6:	e0 e0       	ldi	r30, 0x00	; 0
    3fd8:	ff 27       	eor	r31, r31
    3fda:	09 94       	ijmp
