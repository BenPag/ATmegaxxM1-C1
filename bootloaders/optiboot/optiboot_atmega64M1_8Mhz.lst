
optiboot_atmega64M1_8Mhz.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001ba  0000fc00  0000fc00  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .version      00000002  0000fffe  0000fffe  0000022e  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .debug_aranges 00000028  00000000  00000000  00000230  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000082  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000003ae  00000000  00000000  000002da  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000001c1  00000000  00000000  00000688  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000003c4  00000000  00000000  00000849  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000090  00000000  00000000  00000c10  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000019d  00000000  00000000  00000ca0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000002bc  00000000  00000000  00000e3d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000000c0  00000000  00000000  000010f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0000fc00 <main>:
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    fc00:	11 24       	eor	r1, r1
   * modified Adaboot no-wait mod.
   * Pass the reset reason to app.  Also, it appears that an Uno poweron
   * can leave multiple reset flags set; we only want the bootloader to
   * run on an 'external reset only' status
   */
  ch = MCUSR;
    fc02:	94 b7       	in	r25, 0x34	; 52
  MCUSR = 0;
    fc04:	14 be       	out	0x34, r1	; 52
  if (ch & (_BV(WDRF) | _BV(BORF) | _BV(PORF)))
    fc06:	89 2f       	mov	r24, r25
    fc08:	8d 70       	andi	r24, 0x0D	; 13
    fc0a:	11 f0       	breq	.+4      	; 0xfc10 <main+0x10>
      appStart(ch);
    fc0c:	89 2f       	mov	r24, r25
    fc0e:	cf d0       	rcall	.+414    	; 0xfdae <appStart>
  UART_SRL = (uint8_t)( (F_CPU + BAUD_RATE * 4L) / (BAUD_RATE * 8L) - 1 );
#endif
#endif

  // Set up watchdog to trigger after 500ms
  watchdogConfig(WATCHDOG_1S);
    fc10:	8e e0       	ldi	r24, 0x0E	; 14
    fc12:	b7 d0       	rcall	.+366    	; 0xfd82 <watchdogConfig>
  LED_DDR |= _BV(LED);
#endif

#ifdef SOFT_UART
  /* Set TX pin as output */
  UART_DDR |= _BV(UART_TX_BIT);
    fc14:	53 9a       	sbi	0x0a, 3	; 10
    fc16:	ee 24       	eor	r14, r14
    fc18:	ff 24       	eor	r15, r15
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    fc1a:	b3 e0       	ldi	r27, 0x03	; 3
    fc1c:	ab 2e       	mov	r10, r27
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    fc1e:	bb 24       	eor	r11, r11
    fc20:	b3 94       	inc	r11
	    } while (len -= 2);

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    fc22:	a5 e0       	ldi	r26, 0x05	; 5
    fc24:	da 2e       	mov	r13, r26
	    boot_spm_busy_wait();
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    fc26:	f1 e1       	ldi	r31, 0x11	; 17
    fc28:	cf 2e       	mov	r12, r31
#endif

  /* Forever loop: exits by causing WDT reset */
  for (;;) {
    /* get character from UART */
    ch = getch();
    fc2a:	97 d0       	rcall	.+302    	; 0xfd5a <getch>

    if(ch == STK_GET_PARAMETER) {
    fc2c:	81 34       	cpi	r24, 0x41	; 65
    fc2e:	71 f4       	brne	.+28     	; 0xfc4c <main+0x4c>
      unsigned char which = getch();
    fc30:	94 d0       	rcall	.+296    	; 0xfd5a <getch>
    fc32:	08 2f       	mov	r16, r24
      verifySpace();
    fc34:	ac d0       	rcall	.+344    	; 0xfd8e <verifySpace>
      /*
       * Send optiboot version as "SW version"
       * Note that the references to memory are optimized away.
       */
      if (which == 0x82) {
    fc36:	02 38       	cpi	r16, 0x82	; 130
    fc38:	11 f4       	brne	.+4      	; 0xfc3e <main+0x3e>
	  putch(optiboot_version & 0xFF);
    fc3a:	82 e0       	ldi	r24, 0x02	; 2
    fc3c:	05 c0       	rjmp	.+10     	; 0xfc48 <main+0x48>
      } else if (which == 0x81) {
    fc3e:	01 38       	cpi	r16, 0x81	; 129
    fc40:	11 f4       	brne	.+4      	; 0xfc46 <main+0x46>
	  putch(optiboot_version >> 8);
    fc42:	86 e0       	ldi	r24, 0x06	; 6
    fc44:	01 c0       	rjmp	.+2      	; 0xfc48 <main+0x48>
      } else {
	/*
	 * GET PARAMETER returns a generic 0x03 reply for
         * other parameters - enough to keep Avrdude happy
	 */
	putch(0x03);
    fc46:	83 e0       	ldi	r24, 0x03	; 3
    fc48:	79 d0       	rcall	.+242    	; 0xfd3c <putch>
    fc4a:	75 c0       	rjmp	.+234    	; 0xfd36 <main+0x136>
      }
    }
    else if(ch == STK_SET_DEVICE) {
    fc4c:	82 34       	cpi	r24, 0x42	; 66
    fc4e:	11 f4       	brne	.+4      	; 0xfc54 <main+0x54>
      // SET DEVICE is ignored
      getNch(20);
    fc50:	84 e1       	ldi	r24, 0x14	; 20
    fc52:	03 c0       	rjmp	.+6      	; 0xfc5a <main+0x5a>
    }
    else if(ch == STK_SET_DEVICE_EXT) {
    fc54:	85 34       	cpi	r24, 0x45	; 69
    fc56:	19 f4       	brne	.+6      	; 0xfc5e <main+0x5e>
      // SET DEVICE EXT is ignored
      getNch(5);
    fc58:	85 e0       	ldi	r24, 0x05	; 5
    fc5a:	a1 d0       	rcall	.+322    	; 0xfd9e <getNch>
    fc5c:	6c c0       	rjmp	.+216    	; 0xfd36 <main+0x136>
    }
    else if(ch == STK_LOAD_ADDRESS) {
    fc5e:	85 35       	cpi	r24, 0x55	; 85
    fc60:	79 f4       	brne	.+30     	; 0xfc80 <main+0x80>
      // LOAD ADDRESS
      uint16_t newAddress;
      newAddress = getch();
    fc62:	7b d0       	rcall	.+246    	; 0xfd5a <getch>
      newAddress = (newAddress & 0xff) | (getch() << 8);
    fc64:	e8 2e       	mov	r14, r24
    fc66:	ff 24       	eor	r15, r15
    fc68:	78 d0       	rcall	.+240    	; 0xfd5a <getch>
    fc6a:	08 2f       	mov	r16, r24
    fc6c:	10 e0       	ldi	r17, 0x00	; 0
    fc6e:	10 2f       	mov	r17, r16
    fc70:	00 27       	eor	r16, r16
    fc72:	0e 29       	or	r16, r14
    fc74:	1f 29       	or	r17, r15
#ifdef RAMPZ
      // Transfer top bit to RAMPZ
      RAMPZ = (newAddress & 0x8000) ? 1 : 0;
#endif
      newAddress += newAddress; // Convert from word address to byte address
    fc76:	00 0f       	add	r16, r16
    fc78:	11 1f       	adc	r17, r17
      address = newAddress;
      verifySpace();
    fc7a:	89 d0       	rcall	.+274    	; 0xfd8e <verifySpace>
    fc7c:	78 01       	movw	r14, r16
    fc7e:	5b c0       	rjmp	.+182    	; 0xfd36 <main+0x136>
    }
    else if(ch == STK_UNIVERSAL) {
    fc80:	86 35       	cpi	r24, 0x56	; 86
    fc82:	21 f4       	brne	.+8      	; 0xfc8c <main+0x8c>
      // UNIVERSAL command is ignored
      getNch(4);
    fc84:	84 e0       	ldi	r24, 0x04	; 4
    fc86:	8b d0       	rcall	.+278    	; 0xfd9e <getNch>
      putch(0x00);
    fc88:	80 e0       	ldi	r24, 0x00	; 0
    fc8a:	de cf       	rjmp	.-68     	; 0xfc48 <main+0x48>
    }
    /* Write memory, length is big endian and is in bytes */
    else if(ch == STK_PROG_PAGE) {
    fc8c:	84 36       	cpi	r24, 0x64	; 100
    fc8e:	09 f0       	breq	.+2      	; 0xfc92 <main+0x92>
    fc90:	35 c0       	rjmp	.+106    	; 0xfcfc <main+0xfc>
      // PROGRAM PAGE - we support flash programming only, not EEPROM
      uint8_t desttype;
      uint8_t *bufPtr;
      pagelen_t savelength;

      GETLENGTH(length);
    fc92:	63 d0       	rcall	.+198    	; 0xfd5a <getch>
    fc94:	62 d0       	rcall	.+196    	; 0xfd5a <getch>
    fc96:	18 2f       	mov	r17, r24
      savelength = length;
      desttype = getch();
    fc98:	60 d0       	rcall	.+192    	; 0xfd5a <getch>
    fc9a:	08 2f       	mov	r16, r24
    fc9c:	c0 e0       	ldi	r28, 0x00	; 0
    fc9e:	d1 e0       	ldi	r29, 0x01	; 1

      // read a page worth of contents
      bufPtr = buff;
      do *bufPtr++ = getch();
    fca0:	5c d0       	rcall	.+184    	; 0xfd5a <getch>
    fca2:	89 93       	st	Y+, r24
      while (--length);
    fca4:	1c 17       	cp	r17, r28
    fca6:	e1 f7       	brne	.-8      	; 0xfca0 <main+0xa0>

      // Read command terminator, start reply
      verifySpace();
    fca8:	72 d0       	rcall	.+228    	; 0xfd8e <verifySpace>
 * void writebuffer(memtype, buffer, address, length)
 */
static inline void writebuffer(int8_t memtype, uint8_t *mybuff,
			       uint16_t address, pagelen_t len)
{
    switch (memtype) {
    fcaa:	05 34       	cpi	r16, 0x45	; 69
    fcac:	09 f4       	brne	.+2      	; 0xfcb0 <main+0xb0>
    fcae:	ff cf       	rjmp	.-2      	; 0xfcae <main+0xae>
	     * Start the page erase and wait for it to finish.  There
	     * used to be code to do this while receiving the data over
	     * the serial link, but the performance improvement was slight,
	     * and we needed the space back.
	     */
	    __boot_page_erase_short((uint16_t)(void*)address);
    fcb0:	f7 01       	movw	r30, r14
    fcb2:	a7 be       	out	0x37, r10	; 55
    fcb4:	e8 95       	spm
	    boot_spm_busy_wait();
    fcb6:	07 b6       	in	r0, 0x37	; 55
    fcb8:	00 fc       	sbrc	r0, 0
    fcba:	fd cf       	rjmp	.-6      	; 0xfcb6 <main+0xb6>
    fcbc:	a7 01       	movw	r20, r14
    fcbe:	a0 e0       	ldi	r26, 0x00	; 0
    fcc0:	b1 e0       	ldi	r27, 0x01	; 1
	    /*
	     * Copy data from the buffer into the flash write buffer.
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
    fcc2:	2c 91       	ld	r18, X
    fcc4:	30 e0       	ldi	r19, 0x00	; 0
		a |= (*bufPtr++) << 8;
    fcc6:	11 96       	adiw	r26, 0x01	; 1
    fcc8:	8c 91       	ld	r24, X
    fcca:	11 97       	sbiw	r26, 0x01	; 1
    fccc:	90 e0       	ldi	r25, 0x00	; 0
    fcce:	98 2f       	mov	r25, r24
    fcd0:	88 27       	eor	r24, r24
    fcd2:	82 2b       	or	r24, r18
    fcd4:	93 2b       	or	r25, r19
#define wdtVect (*(uint16_t*)(RAMSTART+SPM_PAGESIZE*2+6))
#endif


/* main program starts here */
int main(void) {
    fcd6:	12 96       	adiw	r26, 0x02	; 2
	     */
	    do {
		uint16_t a;
		a = *bufPtr++;
		a |= (*bufPtr++) << 8;
		__boot_page_fill_short((uint16_t)(void*)addrPtr,a);
    fcd8:	fa 01       	movw	r30, r20
    fcda:	0c 01       	movw	r0, r24
    fcdc:	b7 be       	out	0x37, r11	; 55
    fcde:	e8 95       	spm
    fce0:	11 24       	eor	r1, r1
		addrPtr += 2;
    fce2:	4e 5f       	subi	r20, 0xFE	; 254
    fce4:	5f 4f       	sbci	r21, 0xFF	; 255
	    } while (len -= 2);
    fce6:	1a 17       	cp	r17, r26
    fce8:	61 f7       	brne	.-40     	; 0xfcc2 <main+0xc2>

	    /*
	     * Actually Write the buffer to flash (and wait for it to finish.)
	     */
	    __boot_page_write_short((uint16_t)(void*)address);
    fcea:	f7 01       	movw	r30, r14
    fcec:	d7 be       	out	0x37, r13	; 55
    fcee:	e8 95       	spm
	    boot_spm_busy_wait();
    fcf0:	07 b6       	in	r0, 0x37	; 55
    fcf2:	00 fc       	sbrc	r0, 0
    fcf4:	fd cf       	rjmp	.-6      	; 0xfcf0 <main+0xf0>
#if defined(RWWSRE)
	    // Reenable read access to flash
	    boot_rww_enable();
    fcf6:	c7 be       	out	0x37, r12	; 55
    fcf8:	e8 95       	spm
    fcfa:	1d c0       	rjmp	.+58     	; 0xfd36 <main+0x136>
      writebuffer(desttype, buff, address, savelength);


    }
    /* Read memory block mode, length is big endian.  */
    else if(ch == STK_READ_PAGE) {
    fcfc:	84 37       	cpi	r24, 0x74	; 116
    fcfe:	69 f4       	brne	.+26     	; 0xfd1a <main+0x11a>
      uint8_t desttype;
      GETLENGTH(length);
    fd00:	2c d0       	rcall	.+88     	; 0xfd5a <getch>
    fd02:	2b d0       	rcall	.+86     	; 0xfd5a <getch>
    fd04:	08 2f       	mov	r16, r24

      desttype = getch();
    fd06:	29 d0       	rcall	.+82     	; 0xfd5a <getch>

      verifySpace();
    fd08:	42 d0       	rcall	.+132    	; 0xfd8e <verifySpace>
    fd0a:	e7 01       	movw	r28, r14
	    __asm__ ("elpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#else
	    // read a Flash byte and increment the address
	    __asm__ ("lpm %0,Z+\n" : "=r" (ch), "=z" (address): "1" (address));
#endif
	    putch(ch);
    fd0c:	fe 01       	movw	r30, r28
    fd0e:	85 91       	lpm	r24, Z+
    fd10:	ef 01       	movw	r28, r30
    fd12:	14 d0       	rcall	.+40     	; 0xfd3c <putch>
	} while (--length);
    fd14:	01 50       	subi	r16, 0x01	; 1
    fd16:	d1 f7       	brne	.-12     	; 0xfd0c <main+0x10c>
    fd18:	0e c0       	rjmp	.+28     	; 0xfd36 <main+0x136>
	  
      read_mem(desttype, address, length);
    }

    /* Get device signature bytes  */
    else if(ch == STK_READ_SIGN) {
    fd1a:	85 37       	cpi	r24, 0x75	; 117
    fd1c:	39 f4       	brne	.+14     	; 0xfd2c <main+0x12c>
      // READ SIGN - return what Avrdude wants to hear
      verifySpace();
    fd1e:	37 d0       	rcall	.+110    	; 0xfd8e <verifySpace>
        putch(SIGNATURE_0);
    fd20:	8e e1       	ldi	r24, 0x1E	; 30
    fd22:	0c d0       	rcall	.+24     	; 0xfd3c <putch>
//        putch(SIGNATURE_1);
        putch(0x96);										// Having to FORCE hardcoded for ATmega64M1...
    fd24:	86 e9       	ldi	r24, 0x96	; 150
    fd26:	0a d0       	rcall	.+20     	; 0xfd3c <putch>
        putch(SIGNATURE_2);
    fd28:	84 e8       	ldi	r24, 0x84	; 132
    fd2a:	8e cf       	rjmp	.-228    	; 0xfc48 <main+0x48>
    }
    else if (ch == STK_LEAVE_PROGMODE) { /* 'Q' */
    fd2c:	81 35       	cpi	r24, 0x51	; 81
    fd2e:	11 f4       	brne	.+4      	; 0xfd34 <main+0x134>
      // Adaboot no-wait mod
      watchdogConfig(WATCHDOG_16MS);
    fd30:	88 e0       	ldi	r24, 0x08	; 8
    fd32:	27 d0       	rcall	.+78     	; 0xfd82 <watchdogConfig>
      verifySpace();
    }
    else {
      // This covers the response to commands like STK_ENTER_PROGMODE
      verifySpace();
    fd34:	2c d0       	rcall	.+88     	; 0xfd8e <verifySpace>
    }
    putch(STK_OK);
    fd36:	80 e1       	ldi	r24, 0x10	; 16
    fd38:	01 d0       	rcall	.+2      	; 0xfd3c <putch>
    fd3a:	77 cf       	rjmp	.-274    	; 0xfc2a <main+0x2a>

0000fd3c <putch>:
void putch(char ch) {
#ifndef SOFT_UART
  while (!(UART_SRA & _BV(UDRE0)));
  UART_UDR = ch;
#else
  __asm__ __volatile__ (
    fd3c:	2a e0       	ldi	r18, 0x0A	; 10
    fd3e:	30 e0       	ldi	r19, 0x00	; 0
    fd40:	80 95       	com	r24
    fd42:	08 94       	sec
    fd44:	10 f4       	brcc	.+4      	; 0xfd4a <putch+0xe>
    fd46:	5b 98       	cbi	0x0b, 3	; 11
    fd48:	02 c0       	rjmp	.+4      	; 0xfd4e <putch+0x12>
    fd4a:	5b 9a       	sbi	0x0b, 3	; 11
    fd4c:	00 00       	nop
    fd4e:	15 d0       	rcall	.+42     	; 0xfd7a <uartDelay>
    fd50:	14 d0       	rcall	.+40     	; 0xfd7a <uartDelay>
    fd52:	86 95       	lsr	r24
    fd54:	2a 95       	dec	r18
    fd56:	b1 f7       	brne	.-20     	; 0xfd44 <putch+0x8>
      [uartBit] "I" (UART_TX_BIT)
    :
      "r25"
  );
#endif
}
    fd58:	08 95       	ret

0000fd5a <getch>:
}
#endif

// Watchdog functions. These are only safe with interrupts turned off.
void watchdogReset() {
  __asm__ __volatile__ (
    fd5a:	a8 95       	wdr
  LED_PIN |= _BV(LED);
#endif
#endif

  return ch;
}
    fd5c:	29 e0       	ldi	r18, 0x09	; 9
    fd5e:	30 e0       	ldi	r19, 0x00	; 0
    fd60:	4c 99       	sbic	0x09, 4	; 9
    fd62:	fe cf       	rjmp	.-4      	; 0xfd60 <getch+0x6>
    fd64:	0a d0       	rcall	.+20     	; 0xfd7a <uartDelay>
    fd66:	09 d0       	rcall	.+18     	; 0xfd7a <uartDelay>
    fd68:	08 d0       	rcall	.+16     	; 0xfd7a <uartDelay>
    fd6a:	88 94       	clc
    fd6c:	4c 99       	sbic	0x09, 4	; 9
    fd6e:	08 94       	sec
    fd70:	2a 95       	dec	r18
    fd72:	11 f0       	breq	.+4      	; 0xfd78 <getch+0x1e>
    fd74:	87 95       	ror	r24
    fd76:	f7 cf       	rjmp	.-18     	; 0xfd66 <getch+0xc>
    fd78:	08 95       	ret

0000fd7a <uartDelay>:
#if UART_B_VALUE > 255
#error Baud rate too slow for soft UART
#endif

void uartDelay() {
  __asm__ __volatile__ (
    fd7a:	93 e1       	ldi	r25, 0x13	; 19
    fd7c:	9a 95       	dec	r25
    fd7e:	f1 f7       	brne	.-4      	; 0xfd7c <uartDelay+0x2>
    fd80:	08 95       	ret

0000fd82 <watchdogConfig>:
    "wdr\n"
  );
}

void watchdogConfig(uint8_t x) {
  WDTCSR = _BV(WDCE) | _BV(WDE);
    fd82:	e0 e6       	ldi	r30, 0x60	; 96
    fd84:	f0 e0       	ldi	r31, 0x00	; 0
    fd86:	98 e1       	ldi	r25, 0x18	; 24
    fd88:	90 83       	st	Z, r25
  WDTCSR = x;
    fd8a:	80 83       	st	Z, r24
}
    fd8c:	08 95       	ret

0000fd8e <verifySpace>:
  do getch(); while (--count);
  verifySpace();
}

void verifySpace() {
  if (getch() != CRC_EOP) {
    fd8e:	e5 df       	rcall	.-54     	; 0xfd5a <getch>
    fd90:	80 32       	cpi	r24, 0x20	; 32
    fd92:	19 f0       	breq	.+6      	; 0xfd9a <verifySpace+0xc>
    watchdogConfig(WATCHDOG_16MS);    // shorten WD timeout
    fd94:	88 e0       	ldi	r24, 0x08	; 8
    fd96:	f5 df       	rcall	.-22     	; 0xfd82 <watchdogConfig>
    fd98:	ff cf       	rjmp	.-2      	; 0xfd98 <verifySpace+0xa>
    while (1)			      // and busy-loop so that WD causes
      ;				      //  a reset and app start.
  }
  putch(STK_INSYNC);
    fd9a:	84 e1       	ldi	r24, 0x14	; 20
}
    fd9c:	cf cf       	rjmp	.-98     	; 0xfd3c <putch>

0000fd9e <getNch>:
    ::[count] "M" (UART_B_VALUE)
  );
}
#endif

void getNch(uint8_t count) {
    fd9e:	1f 93       	push	r17
    fda0:	18 2f       	mov	r17, r24
  do getch(); while (--count);
    fda2:	db df       	rcall	.-74     	; 0xfd5a <getch>
    fda4:	11 50       	subi	r17, 0x01	; 1
    fda6:	e9 f7       	brne	.-6      	; 0xfda2 <getNch+0x4>
  verifySpace();
    fda8:	f2 df       	rcall	.-28     	; 0xfd8e <verifySpace>
}
    fdaa:	1f 91       	pop	r17
    fdac:	08 95       	ret

0000fdae <appStart>:

void appStart(uint8_t rstFlags) {
  // save the reset flags in the designated register
  //  This can be saved in a main program by putting code in .init0 (which
  //  executes before normal c init code) to save R2 to a global variable.
  __asm__ __volatile__ ("mov r2, %0\n" :: "r" (rstFlags));
    fdae:	28 2e       	mov	r2, r24

  watchdogConfig(WATCHDOG_OFF);
    fdb0:	80 e0       	ldi	r24, 0x00	; 0
    fdb2:	e7 df       	rcall	.-50     	; 0xfd82 <watchdogConfig>
  __asm__ __volatile__ (
    fdb4:	ee 27       	eor	r30, r30
    fdb6:	ff 27       	eor	r31, r31
    fdb8:	09 94       	ijmp
